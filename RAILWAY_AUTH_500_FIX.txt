# üö® RAILWAY 500 ERROR FIX - Auth Endpoints Failing

## Problem
Your Flutter app gets **500 Server Error** when calling:
- `POST /api/register`
- `POST /api/login`

Response: `{"message":"Server Error"}`

---

## Root Causes (Most Likely)

### 1. **Database Not Connected** ‚ö†Ô∏è
Railway needs a database service (MySQL or PostgreSQL) provisioned and migrated.

**Check:**
```bash
# In Railway logs, look for:
SQLSTATE[HY000] [2002] Connection refused
# OR
Database [laravel] not found
```

**Fix:**
1. Go to Railway Dashboard ‚Üí Your Project
2. Click **"+ New"** ‚Üí **Add Database** ‚Üí Select **MySQL** or **PostgreSQL**
3. Railway will auto-inject these vars:
   - `DATABASE_URL`, `MYSQL_URL`, or `PGHOST`, `PGPORT`, `PGDATABASE`, `PGUSER`, `PGPASSWORD`
4. In Railway Environment Variables, set:
   ```
   DB_CONNECTION=mysql
   # (or pgsql if using PostgreSQL)
   ```
5. **Run migrations** via Railway console or add to build script:
   ```bash
   php artisan migrate --force
   ```

---

### 2. **APP_KEY Missing or Invalid** üîë
Laravel crashes if `APP_KEY` is not set.

**Check Railway Env Vars:**
- Look for `APP_KEY=base64:...`

**Fix:**
1. Generate a key locally:
   ```bash
   php artisan key:generate --show
   ```
2. Copy the output (starts with `base64:...`)
3. In Railway ‚Üí Environment Variables ‚Üí Add:
   ```
   APP_KEY=base64:YOUR_GENERATED_KEY_HERE
   ```
4. Redeploy

---

### 3. **Migrations Not Run** üì¶
The `users` table doesn't exist, causing register/login to fail.

**Fix:**
Add to your Railway build command or run manually:
```bash
php artisan migrate --force
php artisan db:seed --force --class=DatabaseSeeder
```

In Railway Settings ‚Üí Deploy ‚Üí Build Command:
```bash
composer install --no-dev --optimize-autoloader && php artisan config:cache && php artisan route:cache && php artisan view:cache && php artisan migrate --force
```

---

### 4. **Rate Limiter `auth` Not Defined** (Fixed locally, verify Railway)
We fixed this locally but ensure Railway has the same code.

**Verify** `app/Providers/AppServiceProvider.php` has:
```php
RateLimiter::for('auth', function (Request $request) {
    return Limit::perMinute(5)->by($request->ip());
});
```

---

## Quick Diagnostic Steps

### Step 1: Check Railway Logs
1. Railway Dashboard ‚Üí Your Service ‚Üí **Deployments** ‚Üí Click latest
2. Scroll to **Logs** section
3. Look for error messages like:
   - `SQLSTATE` errors ‚Üí Database issue
   - `No application encryption key` ‚Üí APP_KEY missing
   - `Class 'MongoDB\...' not found` ‚Üí Extension issue (less likely)

### Step 2: Hit Debug Endpoint
Visit in browser:
```
https://hair-salon-production.up.railway.app/health-check-diagnostics-2024
```

This returns JSON showing:
- Laravel version
- DB connections (SQLite, MongoDB)
- Collections count

If this also returns 500, **APP_KEY or database is the issue**.

### Step 3: Test API Health Check
```bash
curl https://hair-salon-production.up.railway.app/api
```

Should return:
```json
{
  "message": "API is working!",
  "timestamp": "...",
  "version": "1.0"
}
```

If this **works**, problem is auth-specific (likely DB).

---

## Railway Environment Variables Checklist

Ensure Railway has these set:

### Core
```
APP_NAME=Luxe Hair Studio
APP_ENV=production
APP_KEY=base64:YOUR_GENERATED_KEY
APP_DEBUG=false
APP_URL=https://hair-salon-production.up.railway.app
```

### Database (MySQL)
```
DB_CONNECTION=mysql
DB_HOST=${MYSQLHOST}
DB_PORT=${MYSQLPORT}
DB_DATABASE=${MYSQLDATABASE}
DB_USERNAME=${MYSQLUSER}
DB_PASSWORD=${MYSQLPASSWORD}
```

OR if using PostgreSQL:
```
DB_CONNECTION=pgsql
DB_HOST=${PGHOST}
DB_PORT=${PGPORT}
DB_DATABASE=${PGDATABASE}
DB_USERNAME=${PGUSER}
DB_PASSWORD=${PGPASSWORD}
```

### MongoDB (Optional - for services/deals)
```
DB_MONGO_HOST=${MONGOHOST}
DB_MONGO_PORT=${MONGOPORT}
DB_MONGO_DATABASE=luxe_catalog
DB_MONGO_USERNAME=${MONGOUSER}
DB_MONGO_PASSWORD=${MONGOPASSWORD}
```

### Cache/Session
```
CACHE_DRIVER=file
SESSION_DRIVER=file
```

### Security
```
SANCTUM_STATEFUL_DOMAINS=
SESSION_DOMAIN=.railway.app
```

---

## Step-by-Step Fix

### Fix 1: Add MySQL Database
1. Railway Dashboard ‚Üí Your Project
2. **+ New** ‚Üí **Database** ‚Üí **MySQL**
3. Wait for provisioning (~30 seconds)
4. Railway auto-sets: `MYSQLHOST`, `MYSQLPORT`, etc.
5. In Environment Variables ‚Üí Add:
   ```
   DB_CONNECTION=mysql
   ```
6. Trigger redeploy

### Fix 2: Run Migrations
After database is provisioned:

**Option A: Via Railway CLI**
```bash
railway run php artisan migrate --force
```

**Option B: Add to Deploy Script**
In `nixpacks.toml` or Railway Build Settings:
```toml
[phases.setup]
cmds = ["php artisan migrate --force"]
```

### Fix 3: Verify APP_KEY
```bash
# Locally
php artisan key:generate --show

# Copy output, then in Railway add:
APP_KEY=base64:THE_KEY_YOU_COPIED
```

### Fix 4: Check Code is Deployed
Ensure your latest code (with rate limiter fix) is pushed:
```bash
git add .
git commit -m "Fix rate limiter and auth endpoints"
git push origin main
```

Railway auto-deploys on push.

---

## Testing After Fix

### 1. Test API Root
```bash
curl https://hair-salon-production.up.railway.app/api
```
‚úÖ Expect: `{"message":"API is working!"}`

### 2. Test Register
```bash
curl -X POST https://hair-salon-production.up.railway.app/api/register \
  -H "Content-Type: application/json" \
  -d '{"name":"Test User","email":"test@example.com","password":"password123","password_confirmation":"password123"}'
```
‚úÖ Expect: `{"user":{...},"token":"..."}`  
‚ùå If 422: Validation error (email taken, password too short)  
‚ùå If 500: Still broken‚Äîcheck logs

### 3. Test Login
```bash
curl -X POST https://hair-salon-production.up.railway.app/api/login \
  -H "Content-Type: application/json" \
  -d '{"email":"test@example.com","password":"password123"}'
```
‚úÖ Expect: `{"user":{...},"token":"..."}`

---

## Common Railway Deployment Issues

### Issue: `502 Bad Gateway`
**Cause:** App crashed on startup  
**Fix:** Check Railway logs for PHP errors, missing extensions, or env var issues

### Issue: `Class 'MongoDB\...' not found`
**Cause:** MongoDB extension not installed  
**Fix:** Add to `composer.json` require:
```json
"mongodb/laravel-mongodb": "^4.0",
"ext-mongodb": "*"
```

### Issue: Database credentials wrong
**Cause:** Railway uses `${VARIABLE}` syntax in env  
**Fix:** Use Railway-provided variables exactly (case-sensitive)

---

## Final Checklist

- [ ] Railway MySQL/PostgreSQL database provisioned
- [ ] `APP_KEY` set in Railway env vars
- [ ] `DB_CONNECTION=mysql` (or `pgsql`) set
- [ ] Migrations run: `php artisan migrate --force`
- [ ] Latest code pushed to Railway
- [ ] `/api` endpoint returns 200 OK
- [ ] `/api/register` returns 201 Created (not 500)
- [ ] Railway logs show no errors

---

## Need Live Help?

1. **Check Railway Logs:**  
   Railway Dashboard ‚Üí Deployments ‚Üí Latest ‚Üí Logs tab

2. **Share error** from logs (e.g., `SQLSTATE`, `APP_KEY`, etc.)

3. **Test locally first:**
   ```bash
   php artisan serve
   # Then: curl -X POST http://127.0.0.1:8000/api/register ...
   ```
   If it works locally but not on Railway, it's a deployment config issue.

---

**Most Likely Fix:** Add MySQL database in Railway + set `DB_CONNECTION=mysql` + run migrations. üöÄ
