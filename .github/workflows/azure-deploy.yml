name: Deploy Luxe Hair Studio to Azure

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: your-app-name # Replace with your actual Azure App Service name
  AZURE_WEBAPP_PACKAGE_PATH: '.'
  PHP_VERSION: '8.2'
  NODE_VERSION: '18'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: luxe_hair_studio_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, dom, fileinfo, mysql, pdo_mysql, redis, mongodb
        coverage: xdebug

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress --no-interaction

    - name: Install NPM dependencies
      run: npm ci

    - name: Build assets
      run: npm run build

    - name: Prepare Laravel Application
      run: |
        cp .env.example .env
        php artisan key:generate
        mkdir -p database
        touch database/database.sqlite

    - name: Run database migrations
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite
      run: php artisan migrate --force

    - name: Run tests
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite
      run: php artisan test

  build-and-deploy:
    name: Build and Deploy to Azure
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, dom, fileinfo, mysql, pdo_mysql, redis, mongodb
        tools: composer:v2

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Install Composer dependencies (production)
      run: composer install --optimize-autoloader --no-dev --no-interaction --prefer-dist

    - name: Install NPM dependencies
      run: npm ci

    - name: Build frontend assets
      run: npm run build

    - name: Setup production environment
      run: |
        cp .env.azure .env
        php artisan key:generate --force --no-interaction

    - name: Optimize Laravel for production
      run: |
        php artisan config:cache
        php artisan route:cache
        php artisan view:cache
        php artisan event:cache

    - name: Create deployment package
      run: |
        # Remove development files and directories
        rm -rf node_modules
        rm -rf tests
        rm -rf .git
        rm -f .env.example
        rm -f .gitignore
        rm -f .gitattributes
        rm -f phpunit.xml
        rm -f webpack.mix.js
        rm -f package.json
        rm -f package-lock.json
        rm -f tailwind.config.js
        rm -f postcss.config.js
        rm -f vite.config.js
        
        # Create deployment artifact
        zip -r deployment.zip . -x "*.git*" "node_modules/*" "tests/*" ".env*"

    - name: Upload deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: laravel-app
        path: deployment.zip

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

    - name: Run post-deployment commands
      uses: azure/CLI@v1
      with:
        azcliversion: 2.30.0
        inlineScript: |
          # Wait for deployment to complete
          sleep 30
          
          # Run Laravel commands on Azure App Service
          az webapp ssh --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ env.AZURE_WEBAPP_NAME }} --command "cd /home/site/wwwroot && php artisan migrate --force"
          az webapp ssh --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ env.AZURE_WEBAPP_NAME }} --command "cd /home/site/wwwroot && php artisan db:seed --class=MongoDBSeeder --force"
          az webapp ssh --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ env.AZURE_WEBAPP_NAME }} --command "cd /home/site/wwwroot && php artisan storage:link"

  deploy-staging:
    name: Deploy to Staging Slot
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, dom, fileinfo, mysql, pdo_mysql, redis, mongodb

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies and build
      run: |
        composer install --optimize-autoloader --no-dev --no-interaction
        npm ci
        npm run build

    - name: Deploy to Azure Web App (Staging)
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        slot-name: staging
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_STAGING }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Check application health
      run: |
        # Wait for application to be ready
        sleep 60
        
        # Check main endpoints
        curl -f https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/ || exit 1
        curl -f https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/services || exit 1
        
        echo "‚úÖ Application health check passed"

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "üöÄ Deployment successful! Application is running at https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/"
        else
          echo "‚ùå Deployment failed or health check failed"
          exit 1
        fi