name: Test Luxe Hair Studio

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-versions: ['8.2', '8.3']
        
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP ${{ matrix.php-versions }}
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-versions }}
        extensions: mbstring, dom, fileinfo, mysql, pdo_sqlite, redis
        coverage: xdebug

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Get Composer Cache Directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Cache Node.js dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-

    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress --no-interaction

    - name: Install NPM dependencies
      run: npm ci

    - name: Build assets
      run: npm run build

    - name: Prepare Laravel Application
      run: |
        cp .env.testing .env
        php artisan key:generate
        mkdir -p database
        touch database/database.sqlite

    - name: Create Database
      run: php artisan migrate --force
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite

    - name: Seed Database
      run: php artisan db:seed --force
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite

    - name: Run Unit Tests
      run: php artisan test --testsuite=Unit --stop-on-failure
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite

    - name: Run Feature Tests
      run: php artisan test --testsuite=Feature --stop-on-failure
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite

    - name: Generate Test Coverage
      run: php artisan test --coverage-clover=coverage.xml
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Check Code Style
      run: |
        if [ -f ./vendor/bin/pint ]; then
          ./vendor/bin/pint --test
        else
          echo "Laravel Pint not found, skipping code style check"
        fi

    - name: Static Analysis with Larastan
      run: |
        if [ -f ./vendor/bin/phpstan ]; then
          ./vendor/bin/phpstan analyse --memory-limit=2G
        else
          echo "PHPStan not found, skipping static analysis"
        fi

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npx eslint resources/js --ext .js,.vue

    - name: Build for production
      run: npm run build

    - name: Test build output
      run: |
        if [ ! -d "public/build" ]; then
          echo "Build directory not found!"
          exit 1
        fi
        echo "Build completed successfully"